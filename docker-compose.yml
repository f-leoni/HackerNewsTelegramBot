services:
  # Servizio per il bot Telegram
  bot:
    build:
      context: .
      dockerfile: Dockerfile # Usa il Dockerfile nella root
    container_name: hackernews-bot
    # Riavvia sempre il container se si ferma
    restart: always
    # Passa le variabili d'ambiente dal file .env del bot
    env_file:
      - ./telegram_bot/.env
    volumes:
      # Mappa la cartella locale del database (bind mount)
      - ./shared/db:/app/shared/db
      # Mappa un volume nominato per i file di sessione di Pyrogram in una cartella dedicata
      - bot_session:/app/session
    # Dipende dal servizio db_init per assicurarsi che il DB sia pronto
    depends_on:
      - db_init

  # Servizio per il webserver
  webserver:
    build:
      # Il contesto è la root del progetto, così può vedere sia 'webserver' che 'shared'
      context: .
      # Specifichiamo il percorso del Dockerfile da usare
      dockerfile: ./webserver/Dockerfile
    container_name: hackernews-webserver
    restart: always
    # Aggiungi questa riga per caricare le variabili per il webserver
    env_file:
      - ./webserver/.env
    ports:
      # Mappa la porta 8443 del container alla porta 8443 del tuo server/PC
      - "8443:8443"
    volumes:
      # Mappa la cartella locale del database (bind mount)
      - ./shared/db:/app/shared/db
      # Mappa un volume per i certificati SSL in una cartella dedicata per non nascondere il codice
      - web_certs:/app/certs
    depends_on:
      - db_init

  # Servizio "una tantum" per inizializzare/migrare il DB
  db_init:
    build:
      context: .
      # Specifichiamo di usare lo stesso Dockerfile del bot
      dockerfile: Dockerfile
    command: python3 migrate_bookmarks.py
    volumes: # Anche il servizio di inizializzazione deve vedere lo stesso DB
      - ./shared/db:/app/shared/db

volumes:
  # db_data non è più necessario perché usiamo un bind mount
  bot_session:
  web_certs: