services:
  # Telegram bot service
  bot:
    build:
      context: .
      dockerfile: Dockerfile # Use the Dockerfile in the root
    container_name: hackernews-bot
    # Always restart the container if it stops
    restart: always
    # Pass environment variables from the bot's .env file
    env_file:
      - ./telegram_bot/.env
    volumes:
      # Map the local database folder (bind mount)
      - ./shared/db:/app/shared/db
      # Map a named volume for Pyrogram session files in a dedicated folder
      - bot_session:/app/session
    # Depends on the db_init service to ensure the DB is ready
    depends_on:
      - db_init

  # Webserver service
  webserver:
    build:
      # The context is the project root, so it can see both 'webserver' and 'shared'
      context: .
      # Specify the path to the Dockerfile to use
      dockerfile: ./webserver/Dockerfile
    container_name: hackernews-webserver
    restart: always
    # Add this line to load variables for the webserver
    env_file:
      - ./webserver/.env
    ports:
      # Map port 8443 of the container to port 8443 of your server/PC
      - "8443:8443"
    volumes:
      # Map the local database folder (bind mount)
      - ./shared/db:/app/shared/db
      # Map a volume for SSL certificates in a dedicated folder to avoid hiding the code
      - web_certs:/app/certs
    depends_on:
      - db_init

  # "One-off" service to initialize/migrate the DB
  db_init:
    build:
      context: .
      # Specify to use the same Dockerfile as the bot
      dockerfile: Dockerfile
    command: python3 migrate_bookmarks.py
    volumes: # The initialization service must also see the same DB
      - ./shared/db:/app/shared/db

volumes:
  # db_data is no longer needed because we use a bind mount
  bot_session:
  web_certs: