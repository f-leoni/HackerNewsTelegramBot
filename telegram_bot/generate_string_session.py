"""
Generate and print a Pyrogram StringSession for headless use.

Usage:
  pwsh> python telegram_bot/generate_string_session.py

This script will:
- load API_ID/API_HASH from .env
- perform an interactive login (if needed) and then print the SESSION_STRING

Keep this string secret. Store it in `.env` as SESSION_STRING to run the bot without interactive prompts.
"""
import os
import sys
import logging
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def main():
    # Load .env from common locations
    here = os.path.dirname(__file__)
    for p in [os.path.join(here, '.env'), os.path.join(os.getcwd(), '.env')]:
        if os.path.exists(p):
            logger.info('Loading env from %s', p)
            load_dotenv(p, override=False)

    api_id = os.getenv('API_ID')
    api_hash = os.getenv('API_HASH')
    if not api_id or not api_hash:
        logger.error('API_ID and API_HASH must be set in .env')
        sys.exit(2)

    try:
        from pyrogram import Client
    except Exception as e:
        logger.error('Pyrogram import failed: %s', e)
        logger.info('Install/upgrade pyrogram and tgcrypto: pip install -U pyrogram tgcrypto')
        sys.exit(1)

    session_name = 'bookmark_bot_tmp'
    app = Client(session_name, api_id=api_id, api_hash=api_hash)

    try:
        app.start()

        # Try common export methods depending on pyrogram version
        session_string = None

        # 1) Preferred: Client.export_session_string() available on many pyrogram versions
        if hasattr(app, 'export_session_string'):
            try:
                session_string = app.export_session_string()
            except Exception:
                session_string = None

        # 2) Try importing StringSession from a few possible locations and use its save method
        if not session_string:
            StringSession = None
            for mod in ('pyrogram.sessions', 'pyrogram.session', 'pyrogram.session.string_session'):
                try:
                    modobj = __import__(mod, fromlist=['StringSession'])
                    if hasattr(modobj, 'StringSession'):
                        StringSession = getattr(modobj, 'StringSession')
                        break
                except Exception:
                    continue

            if StringSession:
                try:
                    # Some implementations expose a classmethod or function to export
                    if hasattr(StringSession, 'save'):
                        session_string = StringSession.save(app.session)
                    elif hasattr(StringSession, 'export'):
                        session_string = StringSession.export(app.session)
                except Exception:
                    session_string = None

        if not session_string:
            logger.error('Could not export session string with this pyrogram version.')
            logger.info('Try upgrading pyrogram and tgcrypto: pip install -U pyrogram tgcrypto')
            logger.info('You can still use the local .session file (bookmark_bot_tmp.session) generated by this run.')
            sys.exit(3)

        # Print the session string for the user to copy into .env
        print('\n# Copy this into your .env as SESSION_STRING=...')
        print(session_string)
    except Exception:
        logger.exception('Error while creating/exporting session string')
        sys.exit(4)
    finally:
        try:
            app.stop()
        except Exception:
            pass


if __name__ == '__main__':
    main()
